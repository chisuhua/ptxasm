#ifndef PTX_TRANSLATOR_H
#define PTX_TRANSLATOR_H

#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <vector>
#include <unordered_map>
#include <unordered_set> // For tracking special registers
#include <memory>
#include <cstdint>

// --- PTX Includes (Generated by ANTLR) ---
#include "antlr4-runtime.h"
#include "ptxLexer.h"
#include "ptxParser.h"
#include "ptxParserBaseVisitor.h" // Using Visitor pattern

// --- COASM Includes (for validation, if needed) ---
// #include "coasmLexer.h"
// #include "coasmParser.h"

class PtxTranslator : public ptxParserBaseVisitor {
private:
    ptxParser::AstContext* astContext;
    std::ofstream& outputFile;
    std::string outputFilename;

    // --- Translation State ---
    std::string currentKernelName;
    std::unordered_map<std::string, std::string> ptxParamToCoasmReg;
    std::unordered_map<std::string, std::string> ptxSharedToCoasmReg;
    std::unordered_set<std::string> usedSpecialRegs; // Track for kernel_ctrl

    struct KernelMetadata {
        std::string name;
        std::vector<std::map<std::string, std::string>> args;
        std::vector<std::map<std::string, std::string>> shared;
        int shared_memsize = 0;
        int private_memsize = 0;
        int cmem_size = 0;
        int bar_used = 0;
        int local_framesize = 0;
        uint32_t kernel_ctrl = 0;
        int kernel_mode = 0;
    };
    std::unique_ptr<KernelMetadata> currentKernelMetadata;

    // --- Helper Functions ---
    std::string getOperandText(ptxParser::OperandContext* operandCtx);
    std::string translateQualifierToSuffix(ptxParser::QualifierContext* qualifierCtx);
    std::string translateQualifiersToSuffix(const std::vector<ptxParser::QualifierContext*>& qualifiers);
    std::string mapPtxOperandToCoasm(const std::string& ptxOperandText);
    void recordSpecialRegisterUsage(const std::string& specialRegName);
    uint32_t calculateKernelCtrl();

    // --- Visitor Methods ---
    antlrcpp::Any visitAst(ptxParser::AstContext *context) override;
    antlrcpp::Any visitKernels(ptxParser::KernelsContext *context) override;
    antlrcpp::Any visitKernel(ptxParser::KernelContext *context) override;
    antlrcpp::Any visitParam(ptxParser::ParamContext *context) override;
    antlrcpp::Any visitStatements(ptxParser::StatementsContext *context) override;
    antlrcpp::Any visitStatement(ptxParser::StatementContext *context) override;
    antlrcpp::Any visitCompoundStatement(ptxParser::CompoundStatementContext *context) override;

    // --- Instruction Visitors ---
    antlrcpp::Any visitLdStatement(ptxParser::LdStatementContext *context) override;
    antlrcpp::Any visitStStatement(ptxParser::StStatementContext *context) override;
    antlrcpp::Any visitAddStatement(ptxParser::AddStatementContext *context) override;
    antlrcpp::Any visitMulStatement(ptxParser::MulStatementContext *context) override;
    antlrcpp::Any visitCvtStatement(ptxParser::CvtStatementContext *context) override;
    antlrcpp::Any visitMovStatement(ptxParser::MovStatementContext *context) override;
    antlrcpp::Any visitSetpStatement(ptxParser::SetpStatementContext *context) override;
    antlrcpp::Any visitBraStatement(ptxParser::BraStatementContext *context) override;
    antlrcpp::Any visitMadStatement(ptxParser::MadStatementContext *context) override;
    antlrcpp::Any visitRetStatement(ptxParser::RetStatementContext *context) override;
    antlrcpp::Any visitDivStatement(ptxParser::DivStatementContext *context) override;
    antlrcpp::Any visitSubStatement(ptxParser::SubStatementContext *context) override;
    antlrcpp::Any visitShlStatement(ptxParser::ShlStatementContext *context) override;
    antlrcpp::Any visitShrStatement(ptxParser::ShrStatementContext *context) override;
    antlrcpp::Any visitMaxStatement(ptxParser::MaxStatementContext *context) override;
    antlrcpp::Any visitMinStatement(ptxParser::MinStatementContext *context) override;
    antlrcpp::Any visitAndStatement(ptxParser::AndStatementContext *context) override;
    antlrcpp::Any visitOrStatement(ptxParser::OrStatementContext *context) override;
    antlrcpp::Any visitXorStatement(ptxParser::XorStatementContext *context) override;
    antlrcpp::Any visitNegStatement(ptxParser::NegStatementContext *context) override;
    antlrcpp::Any visitNotStatement(ptxParser::NotStatementContext *context) override;
    antlrcpp::Any visitAbsStatement(ptxParser::AbsStatementContext *context) override;
    antlrcpp::Any visitSelpStatement(ptxParser::SelpStatementContext *context) override;
    antlrcpp::Any visitFmaStatement(ptxParser::FmaStatementContext *context) override;
    antlrcpp::Any visitRcpStatement(ptxParser::RcpStatementContext *context) override;
    antlrcpp::Any visitSqrtStatement(ptxParser::SqrtStatementContext *context) override;
    antlrcpp::Any visitRsqrtStatement(ptxParser::RsqrtStatementContext *context) override;
    // Add more as needed...

    // --- Output Generation ---
    void emitKernelHeader();
    void emitKernelFooter();

    // --- Validation (Optional) ---
    // bool validateOutput();

public:
    PtxTranslator(ptxParser::AstContext* tree, std::ofstream& out, const std::string& outFilename);
    void translate();
};

#endif // PTX_TRANSLATOR_H
